{
	"info": {
		"_postman_id": "58e060c6-f6cd-4782-b5a9-cf7cc960367e",
		"name": "mercury-py",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8681726"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Auth User :: Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Body isn\\'t a user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.eql('Bad username or password');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"developer\",\r\n    \"password\": \"1c257328bea9ac00edacf3196afa70c1303e288412004ec8f48ac7bc0e8338351376cb549f864a9325597275a12105437ab892cf8d1ff1ee2337b4b8883530b1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/mercury/api/users/login/",
							"host": [
								"{{server}}"
							],
							"path": [
								"mercury",
								"api",
								"users",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user).to.have.property('creation_datetime');\r",
									"    pm.expect(jsonData.user).to.have.property('active');\r",
									"    pm.expect(jsonData.user).to.have.property('access_token');\r",
									"    pm.expect(jsonData.user).to.have.property('links');\r",
									"    pm.expect(jsonData.user.links).to.have.property('self');\r",
									"});\r",
									"\r",
									"pm.test('Body is user: developer', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user.username).is.eql('developer');\r",
									"});\r",
									"\r",
									"pm.test('User have an access_token', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('access_token');\r",
									"    \r",
									"    pm.collectionVariables.set('access_token', jsonData.user.access_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Version",
								"value": "1.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"developer\",\r\n    \"password\": \"1c257328bea9ac00edacf3196afa70c1303e288412004ec8f48ac7bc0e8438351376cb549f864a9325597275a12105437ab892cf8d1ff1ee2337b4b8883530b1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/mercury/api/users/login/",
							"host": [
								"{{server}}"
							],
							"path": [
								"mercury",
								"api",
								"users",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body is users', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('users');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('server') + '/mercury/api/users/login/',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Accept-Version': '1.0',\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            'username': 'administrator',\r",
									"            'password': '8bcfe840e5e5379af91068d99afaa9fefb3f057f2950f6083bb63d592789e58999d2e87b732f9bc0ec63318d95ce9708d25896c4d92fc5e67bab53099aa29088'\r",
									"        })\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    var jsonData = response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user.username).is.eql('administrator');\r",
									"    pm.expect(jsonData.user).to.have.property('creation_datetime');\r",
									"    pm.expect(jsonData.user).to.have.property('active');\r",
									"    pm.expect(jsonData.user).to.have.property('access_token');\r",
									"    pm.expect(jsonData.user).to.have.property('links');\r",
									"    pm.expect(jsonData.user.links).to.have.property('self');\r",
									"\r",
									"    pm.collectionVariables.set('access_token_admin', jsonData.user.access_token);    \r",
									"    pm.collectionVariables.set('link_user_admin', jsonData.user.links.self);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"url": {
							"raw": "{{server}}/mercury/api/users/",
							"host": [
								"{{server}}"
							],
							"path": [
								"mercury",
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user).to.have.property('creation_datetime');\r",
									"    pm.expect(jsonData.user).to.have.property('active');\r",
									"    pm.expect(jsonData.user).to.have.property('links');\r",
									"    pm.expect(jsonData.user.links).to.have.property('self');\r",
									"\r",
									"    pm.collectionVariables.set('link_user', jsonData.user.links.self);\r",
									"});\r",
									"\r",
									"pm.test('Body is user: user-primis', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user.username).is.eql('user-primis');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user-primis\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/mercury/api/users/",
							"host": [
								"{{server}}"
							],
							"path": [
								"mercury",
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user).to.have.property('creation_datetime');\r",
									"    pm.expect(jsonData.user).to.have.property('active');\r",
									"    pm.expect(jsonData.user).to.have.property('links');\r",
									"    pm.expect(jsonData.user.links).to.have.property('self');\r",
									"});\r",
									"\r",
									"pm.test('Body is user: user-primis', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user.username).is.eql('user-primis');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"url": {
							"raw": "{{server}}{{link_user}}",
							"host": [
								"{{server}}{{link_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user).to.have.property('creation_datetime');\r",
									"    pm.expect(jsonData.user).to.have.property('active');\r",
									"    pm.expect(jsonData.user).to.have.property('links');\r",
									"    pm.expect(jsonData.user.links).to.have.property('self');\r",
									"});\r",
									"\r",
									"pm.test('Body is user: user-primis', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user.username).is.eql('user-primis');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user-primis\",\r\n    \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}{{link_user}}",
							"host": [
								"{{server}}{{link_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('result');\r",
									"    pm.expect(jsonData.result).is.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"url": {
							"raw": "{{server}}{{link_user}}",
							"host": [
								"{{server}}{{link_user}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body is notifications', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notifications');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('server') + '/mercury/api/users/',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('access_token_admin'),\r",
									"        'Accept-Version': '1.0',\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            'username': 'user-secundus'\r",
									"        })\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    var jsonData = response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('username');\r",
									"    pm.expect(jsonData.user.username).is.eql('user-secundus');\r",
									"    pm.expect(jsonData.user).to.have.property('creation_datetime');\r",
									"    pm.expect(jsonData.user).to.have.property('active');\r",
									"    pm.expect(jsonData.user).to.have.property('links');\r",
									"    pm.expect(jsonData.user.links).to.have.property('self');\r",
									"\r",
									"    pm.collectionVariables.set('link_user', jsonData.user.links.self);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"url": {
							"raw": "{{server}}{{link_user}}/notifications/",
							"host": [
								"{{server}}{{link_user}}"
							],
							"path": [
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification Email Now",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notification');\r",
									"    pm.expect(jsonData.notification).to.have.property('category');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_schedule');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_dispatch');\r",
									"    pm.expect(jsonData.notification).to.have.property('links');\r",
									"    pm.expect(jsonData.notification.links).to.have.property('self');\r",
									"    pm.expect(jsonData.notification.links.self).to.include(pm.collectionVariables.get('link_user'));\r",
									"\r",
									"    pm.collectionVariables.set('link_notification', jsonData.notification.links.self);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": \"email\",\r\n    \"recipients\": \"perinisimone98@gmail.com\",\r\n    \"subject\": \"Test\",\r\n    \"body\": \"Body test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}{{link_user}}/notifications/",
							"host": [
								"{{server}}{{link_user}}"
							],
							"path": [
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification Email Now Multi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notification');\r",
									"    pm.expect(jsonData.notification).to.have.property('category');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_schedule');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_dispatch');\r",
									"    pm.expect(jsonData.notification).to.have.property('links');\r",
									"    pm.expect(jsonData.notification.links).to.have.property('self');\r",
									"    pm.expect(jsonData.notification.links.self).to.include(pm.collectionVariables.get('link_user'));\r",
									"\r",
									"    pm.collectionVariables.set('link_notification', jsonData.notification.links.self);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": \"email\",\r\n    \"recipients\": [\"perinisimone98@gmail.com\", \"perinisimone98@gmail.com\"],\r\n    \"subject\": \"Test\",\r\n    \"body\": \"Body test multi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}{{link_user}}/notifications/",
							"host": [
								"{{server}}{{link_user}}"
							],
							"path": [
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification Email Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notification');\r",
									"    pm.expect(jsonData.notification).to.have.property('category');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_schedule');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_dispatch');\r",
									"    pm.expect(jsonData.notification).to.have.property('links');\r",
									"    pm.expect(jsonData.notification.links).to.have.property('self');\r",
									"    pm.expect(jsonData.notification.links.self).to.include(pm.collectionVariables.get('link_user'));\r",
									"\r",
									"    pm.collectionVariables.set('link_notification', jsonData.notification.links.self);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": \"email\",\r\n    \"datetime_schedule\": \"2020-12-22 13:00:00\",\r\n    \"recipients\": \"perinisimone98@gmail.com\",\r\n    \"subject\": \"test\",\r\n    \"body\": \"bodyTest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}{{link_user}}/notifications/",
							"host": [
								"{{server}}{{link_user}}"
							],
							"path": [
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notification');\r",
									"    pm.expect(jsonData.notification).to.have.property('category');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_schedule');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_dispatch');\r",
									"    pm.expect(jsonData.notification).to.have.property('links');\r",
									"    pm.expect(jsonData.notification.links).to.have.property('self');\r",
									"});\r",
									"\r",
									"pm.test('Body is link_notification', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notification');\r",
									"    pm.expect(jsonData.notification).to.have.property('links');\r",
									"    pm.expect(jsonData.notification.links).to.have.property('self');\r",
									"    pm.expect(jsonData.notification.links.self).is.eql(pm.collectionVariables.get('link_notification'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"url": {
							"raw": "{{server}}{{link_notification}}",
							"host": [
								"{{server}}{{link_notification}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notification');\r",
									"    pm.expect(jsonData.notification).to.have.property('category');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_schedule');\r",
									"    pm.expect(jsonData.notification).to.have.property('datetime_dispatch');\r",
									"    pm.expect(jsonData.notification).to.have.property('links');\r",
									"    pm.expect(jsonData.notification.links).to.have.property('self');\r",
									"});\r",
									"\r",
									"pm.test('Body is link_notification', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notification');\r",
									"    /*\r",
									"    pm.expect(jsonData.notification).to.have.property('subject');\r",
									"    pm.expect(jsonData.notification.subject).is.eql('Test2');\r",
									"    pm.expect(jsonData.notification).to.have.property('body');\r",
									"    pm.expect(jsonData.notification.subject).is.eql('Body test 2');\r",
									"    */\r",
									"    pm.expect(jsonData.notification).to.have.property('links');\r",
									"    pm.expect(jsonData.notification.links).to.have.property('self');\r",
									"    pm.expect(jsonData.notification.links.self).is.eql(pm.collectionVariables.get('link_notification'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": \"email\",\r\n    \"recipients\": \"perinisimone98@gmail.com\",\r\n    \"subject\": \"Test2\",\r\n    \"body\": \"Body test 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}{{link_notification}}",
							"host": [
								"{{server}}{{link_notification}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response have proper body', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('result');\r",
									"    pm.expect(jsonData.result).is.eql(true);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('server') + pm.collectionVariables.get('link_user'),\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('access_token_admin'),\r",
									"        'Accept-Version': '1.0'\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    console.log(response.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Version",
								"type": "text",
								"value": "1.0"
							}
						],
						"url": {
							"raw": "{{server}}{{link_notification}}",
							"host": [
								"{{server}}{{link_notification}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server",
			"value": "http://127.0.0.1:5000"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "link_user",
			"value": ""
		},
		{
			"key": "access_token_admin",
			"value": ""
		},
		{
			"key": "link_user_admin",
			"value": ""
		},
		{
			"key": "link_notification",
			"value": ""
		}
	]
}